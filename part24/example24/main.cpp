//------------------------------------------------------------------------------

#include "../../bstroustrup_code/std_lib_facilities.h"
#include "../../bstroustrup_code/MatrixIO11.h"
using namespace Numeric_lib;

//------------------------------------------------------------------------------

void help_example24_2(int num)
{
    float x{1.0/num};
    float sum{0};
    for (int i=0; i < num; ++i) sum += x;
    cout << setprecision(15) << sum << "\n";
}

//------------------------------------------------------------------------------

void f24_2(int i, double fpd)
{
    cout << "start: \ti == " << i << "\tfpd == " << fpd << '\n';
    char c = i;      // Тип char действительно представляет
                     // очень маленькие целые числа
    cout << "c == " << int(c) << '\n';
    short s = i;     // Опасно: тип int может не поместиться
                     // в памяти для переменной типа short
    cout << "s == " << s << '\n';
    i = i + 1;       // Что будет, если число i до увеличения
                     // было максимально возможным?
    cout << "i == " << i << '\n';
    long lg = i*i;   // Опасно: long может быть не больше int
    cout << "lg == " << lg << '\n';
    float fps = fpd; // Опасно: значение double может
                     // не поместиться в типе float
    cout << "fps == " << fps << '\n';
    i = fpd;         // Усечение; например, 5.7 -> 5
    cout << "i == " << i << '\n';
    fps = i;         // Возможна потеря точности (при
                     // очень больших целочисленных значениях)
    cout << "fps == " << fps << '\n';
}

//------------------------------------------------------------------------------

void g24_2()
{
    char ch = 0;
    for (int i=0; i < 500; ++i)
        cout << int(ch++) << '\t';
    cout << '\n';
}

//------------------------------------------------------------------------------

void example24_2()
{
    auto def_precision = cout.precision();
    help_example24_2(333);
    help_example24_2(10);

    short int y = 40000;
    int i{1000000};
    cout << setprecision(def_precision)
         << y << " " << i*i << '\n';

    cout << "Размеры: " << sizeof(int)
         << '\t'         << sizeof(float) << '\n';
    int x = 2100000009;     // Большое целое число
    float f = x;
    cout << x << '\t' << f << endl;
    cout << setprecision(15) << x << '\t' << f
         << def_precision << '\n';

    float f1 = 2.8;
    int x1 = f1;
    cout << x1 << '\t' << f1 << '\n';

    g24_2();
    f24_2(2100000009, 210000000.3);
    f24_2(300, 321.34);
}

//------------------------------------------------------------------------------

void example24_2_1()
{
    cout << "Количетсво байтов в типе int: "
         << sizeof(int) << '\n';
    //cout << "" << INT_MAX << endl;
    cout << "Наибольшее число типа int: "
         << numeric_limits<int>::max() << '\n';
    cout << "Наименьшее число типа int: "
         << numeric_limits<int>::min() << '\n';

    if (numeric_limits<char>::is_signed)
        cout << "Тип char имеет знак\n";
    else
        cout << "Тип char не имеет знака\n";

    // Наименьшее положительное значение:
    char ch = numeric_limits<char>::min();
    cout << "Наименьшее значение char: "
         << ch << '\n';
    cout << "Значение int для char с наименьшим "
         << "значением: " << int(ch) << '\n';
}

//------------------------------------------------------------------------------

void f24_3_1(int a[3][5])
{

}

//------------------------------------------------------------------------------

void f24_3_2(int a[][5], int dim1)
{

}

//------------------------------------------------------------------------------

void f24_3_5(int* m, int dim1, int dim2)
{
    for (int i=0; i < dim1; ++i)
        for (int j=0; j < dim2; ++i) m[i*dim2+j] = 0;
}

//------------------------------------------------------------------------------

void example24_3()
{
    f24_3_1(nullptr);
    f24_3_2(nullptr, 2);
}

//------------------------------------------------------------------------------

void f24_5_1(int n1, int n2, int n3)
{
    Matrix<double, 1> ad1(n1);  // Одномерная с элементами double
    Matrix<int, 1>    ai1(n1);  // Одномерная с элементами int
    ad1(7) = 0;                 // Индексирование в стиле Fortran - ()
    ad1[7] = 8;                 // Индексирование в стиле C - ()

    Matrix<double, 2> ad2(n1, n2);      // Двумерная
    Matrix<double, 3> ad3(n1, n2, n3);  // Трехмерная
    ad2(3,4) = 7.5;                     // Истинное многомерное
    ad3(3, 4, 5) = 9.2;                 // индексирование
    ad2[3][4] = 8.5;
}

//------------------------------------------------------------------------------

// Пример ошибок с Матрицами
/*void f24_5_1_err(int n1, int n2, int n3)
{
    Matrix<int, 0> ai0;         // Ошибка: 0-мерная матрица
    Matrix<double, 1> ad1(5);
    Matrix<int, 1> ai(5);

    Matrix<double, 1> ad11(7);
    ad1(7) = 0;                 // Исключение Matrix_error
                                // (7 - за пределами диапозона)
    ad1 = ai;                   // Ошибка: разные типы элементов
    ad1 = ad11;                 // Исключение Matrix_error
                                // (несовпадающие размерности)

    Matrix<double, 2> ad2(n1);  // Ошибка: не указана вторая размерность
    ad2(3) = 7.5;               // Ошибка: неверное количество индексов
    ad2(1, ,2 , 3) = 7.5;       // Ошибка: неверное количество индексов

    Matrix<double, 3> ad3(n1, n2, n3);
    Matrix<double, 3> ad33(n1, n2, n3);
    ad3 = ad33;                 // ОК: одинаковые типы элементов,
                                // одинаковые размерности
}*/

//------------------------------------------------------------------------------

void init24_5_1(Matrix<int, 2>& a)  // Инициализация каждого элемента
{                                   // характеризующим значением
    for (int i=0; i < a.dim1(); ++i)
        for (int j=0; j < a.dim2(); ++j)
            a(i, j) = 10*i+j;
}

//------------------------------------------------------------------------------

void print24_5_1(const Matrix<int, 2>& a)   // Построчный вывод матрицы
{
    for (int i=0; i < a.dim1(); ++i)
        for (int j=0; j < a.dim2(); ++j)
            cout << a(i, j) << '\t';
    cout << '\n';
}

//------------------------------------------------------------------------------

void example24_5_2()
{
    Matrix<int,1> a1(8); // a1 - одномерная матрица целых чисел
    Matrix<int> a(8);    // Означает Matrix<int,1> a(8);

    a.size();            // Количество элементов в Matrix
    a.dim1();            // Количество элементов в первом измерении
    int* p = a.data();   // Получаем данные через указатель на массив

    int i=100, n=500;    // "Случайное" число для примера
    a(i);                // i-й элемент (в стиле Fortran) с проверкой диапазона
    a[i];                // i-й элемент (в стиле C) с проверкой диапазона
    a(1,2);              // Ошибка: а - одномерная матрица

    a.slice(i);          // Элементы с a[i] по последний
    a.slice(i, n);       // n элементов с a[i] по a[i+n-1]

    a.slice(4,4) = a.slice(0,4); // Присваиваем первую половину матрицы второй
    a.slice(4) = a.slice(0, 4);  // Присваиваем первую половину матрицы второй
}

//------------------------------------------------------------------------------

int main()
try
{
    //example24_2();
    //example24_2_1();
    //f24_5_1(1,2,3);
    //f24_5_1_err(1, 2, 3);
    return 0;
}
catch (const exception& e) {
    cout << "\nerror: " << e.what() << '\n';
    return -1;
}
catch (const Matrix_error& e) {
    cout << "\nerror: " << e.name << '\n';
    return -2;
}
catch (...) {
    cerr << "\noops!\n";
    return -3;
}

//------------------------------------------------------------------------------
