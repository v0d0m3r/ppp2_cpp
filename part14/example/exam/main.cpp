#include <Graph.h>

//-----------------------------------------------------------------------------

struct B {
    virtual void f() const { cout << "B::f ";}
    void g()         const { cout << "B::g ";}
};

//-----------------------------------------------------------------------------

struct D : B {
    void f() const override
    { cout << "D::f ";} // Перекрывает B::f
    void g()       { cout << "D::g ";}
};

//-----------------------------------------------------------------------------

struct DD : D {
    void f()       { cout << "DD::f ";} // Не перекрывает D::f (нет const)
    void g() const { cout << "DD::g ";}
};

//-----------------------------------------------------------------------------

void call(const B& b)
{
    b.f();
    b.g();
}

//-----------------------------------------------------------------------------

void example_book()
{
    B b;
    D d;
    DD dd;

    call(b);
    call(d);
    call(dd);

    b.f();
    b.g();

    d.f();
    d.g();

    dd.f();
    dd.g();
}

//-----------------------------------------------------------------------------

struct B1 {
    virtual void vf() const { cout << "B1::vf ";}
    void f()          const { cout << "B1::f ";}
};

//-----------------------------------------------------------------------------

struct D1 : B1 {
    void vf() const override
    { cout << "D1::vf ";}
    void f()  const { cout << "D1::f ";}
};

//-----------------------------------------------------------------------------

void task1()
{
    B1 b1;
    b1.vf();
    b1.f();


}

//-----------------------------------------------------------------------------

void task2()
{
    D1 d1;
    d1.vf();
    d1.f();
}

//-----------------------------------------------------------------------------

void task3()
{
    D1 d1;
    B1& b1{d1};

    b1.vf();
    b1.f();
}

//-----------------------------------------------------------------------------

int main()
{
    cout << "-----------------------------"
         << "example_book()\n";
    example_book();
    cout << "\n-----------------------------"
         << "task1()\n";
    task1();
    cout << "\n-----------------------------"
         << "task2()\n";
    task2();
    cout << "\n-----------------------------"
         << "task3()\n";
    task3();
    cout << "\n-----------------------------"
         << "task4()\n";
    return 0;
}

//-----------------------------------------------------------------------------
