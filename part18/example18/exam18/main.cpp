//------------------------------------------------------------------------------

#include "Vector_easy.hpp"
#include "Test_x.hpp"

//------------------------------------------------------------------------------

X glob(2);  //Глобальня переменная
X xcopy(X a) { return a; }
X xcopy2(X a) { X aa = a; return aa; }
X& ref_to(X& a) { return a; }
X* make(int i) { X a(i); return new X(a); }
struct XX { X a; X b; };

//------------------------------------------------------------------------------

void example18_4()
{
    X loc{4};           // Локальная переменная
    X loc2{loc};        // Копирующий конструктор

    loc = X{5};         // Копирующее присваивание
    loc2 = xcopy(loc);  // Передача по значению и возврат
    loc2 = xcopy2(loc);

    X loc3{6};
    X& r = ref_to(loc); // Передача по ссылке и возврат
    delete make(7);
    delete make(8);
    vector<X> v(4);     // Значения по умолчанию
    XX loc4;
    X* p = new X{9};    // X в динамической памяти
    delete p;
    X* pp = new X[5];   // Массив X в динамической памяти
    delete[] pp;
}

//------------------------------------------------------------------------------

bool is_palindrome(const string& s)
{
    int first{0};               // Индекс первой буквы
    int last{s.length() - 1};   // Индекс последней буквы
    while (first < last) {      // Мы ещё не достигли середины слова
        if (s[first] != s[last]) return false;
        ++first;                // Переход вперед
        --last;                 // Переход назад
    }
    return true;
}

//------------------------------------------------------------------------------

int main()
try
{   
    return 0;
}
catch(exception& e) {
    cout << "error: " << e.what() << '\n';
}

//------------------------------------------------------------------------------
